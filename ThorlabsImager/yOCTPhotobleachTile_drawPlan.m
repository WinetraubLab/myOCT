function yOCTPhotobleachTile_drawPlan(...
    photobleachPlan, FOV_mm, estimatedPhotobleachTime_sec)
% This is function gets a photobleachPlan and draws it to a figure.
%
% INPUTS:
%   photobleachPlan: generated by yOCTPhotobleachTile_createPlan
%   FOV_mm: lens's FOV [x, y].
%   estimatedPhotobleachTime_sec: estimation of how long it will take to
%       photobleach

%% Set default values for testing capabilities

if ~exist('FOV_mm','var')
    FOV_mm = [0.5 0.5];
end
if ~exist('estimatedPhotobleachTime_sec','var')
    estimatedPhotobleachTime_sec=0;
end

%% Set up

% Create a color pallet 
colors = num2cell(winter(length(photobleachPlan)),2);

% Create a bold conversion
minZ_mm = min([photobleachPlan.stageCenterZ_mm]);
maxZ_mm = max([photobleachPlan.stageCenterZ_mm]);
rangeZ_mm = maxZ_mm - minZ_mm;
if rangeZ_mm == 0
    zToLineBold = @(z)(1);
else
    zToLineBold = @(z)( 2*(z-minZ_mm)/rangeZ_mm + 1);
end
    
%% Loop step by step on the photobleach plan and draw
figure(266);
plot(0,0);
for planI = 1:length(photobleachPlan)
    ppStep = photobleachPlan(planI);

    % Draw ROI in red with an "X" where we skip photobleaching
    if ~ppStep.performTilePhotobleaching
        roiBox = [ ...
                -FOV_mm(1)/2 + ppStep.stageCenterX_mm, ...
                -FOV_mm(2)/2 + ppStep.stageCenterY_mm, ...
                 FOV_mm(1), ...
                 FOV_mm(2)];
                
        % Draw a red tile rectangle (edge of ROI)
        rectangle('Position', roiBox, 'EdgeColor', [1 0 0], 'LineWidth', 2); 

        % Draw a centered "X" inside the ROI
        cx = ppStep.stageCenterX_mm; cy = ppStep.stageCenterY_mm;
        dx = FOV_mm(1)/4;            dy = FOV_mm(2)/4;
        plot([cx-dx, cx+dx], [cy-dy, cy+dy], 'r', 'LineWidth', 2);
        plot([cx-dx, cx+dx], [cy+dy, cy-dy], 'r', 'LineWidth', 2);
    end

    % Draw the phtobleach panel
    rectangle('Position',[...
        -FOV_mm(1)/2+ppStep.stageCenterX_mm ...
        -FOV_mm(2)/2+ppStep.stageCenterY_mm ...
        FOV_mm(1) FOV_mm(2)],...
        'EdgeColor',[0.5 0.5 0.5]);
    hold on;
    
    % Draw the lines that are photobleached
    s = ppStep.ptStartInFOV_mm;
    e = ppStep.ptEndInFOV_mm;
    s_x = s(1,:)+ppStep.stageCenterX_mm;
    s_y = s(2,:)+ppStep.stageCenterY_mm;
    e_x = e(1,:)+ppStep.stageCenterX_mm;
    e_y = e(2,:)+ppStep.stageCenterY_mm;
    for plotI = 1:length(s_x)
       plot([s_x(plotI) e_x(plotI)],[s_y(plotI) e_y(plotI)], ...
           'LineWidth', zToLineBold(ppStep.stageCenterZ_mm),...
           'Color',colors{planI});
    end    
end

%% Finish
hold off;
axis equal;
axis ij; % Match coordinate system: https://docs.google.com/presentation/d/1tOod76WvhvOuByo-K81YB4b3QjRq-6A5j2ztS_ANSNo/edit#slide=id.g2812f1bd1d1_0_115
grid on;
xlabel('x[mm]');
ylabel('y[mm]');
title(sprintf([ ...
    'Photobleach Pattern. Estimated Time: %.0f minutes\n' ...
    'First Line = Blue, Last Line = Green, Bold is Deeper' ...
    ],ceil(estimatedPhotobleachTime_sec/60)));
